{"topics":[["React Native","Third Topic","This is it first"],["React"],["React Native"],["React Native","AsyncStorage"],["Django"],["Flask"],["Droplet Initial Setup"],["Rocket, Rust, Cargo"],["MySQL"],["MySQL","Installation","Steps"],["Setup Nginx"],["Setup Node"],["Setup PostgreSQL"],["Setup SSL"],["Expo Detach"],["Javascript"],["NanoEdit"],["React Native","App.js Setup"],["React Native","In-App Purchase"],["React Native","Upload Photo"],["React Native","Snap Photo"],["React Native","Choose Photo"],["React","Navigation"],["React","Browse Photo"],["Sublime Text","IDE Info"],["Sublime Text","Open in Terminal"],["HTML","Nodes"],["Ruby on Rails","Install on Web Server"],["Ruby on Rails","Install on Mac"],["React Native","Login with Facebook Integration"],["React Native","Login with GitHub Integration"],["Ruby on Rails","MySQL"],["Ruby on Rails","CLI"],["Flask","Connect to server"],["Generate SSH Keys"],["Flask","MySQL"],["Flask","Deploy with Docker"],["Flask","Install MySQL"],["Ruby on Rails"],["Sublime Text"],["Ruby on Rails","Start project"],["Ruby on Rails","Start model"],["Ruby on Rails","Setup controller and fetch"],["Ruby on Rails","Send email"],["Ruby on Rails","integrate react.js"],["Angular"],["React Native","Third Topic","this is it second"]],"notes":["this is the new third topic of react native first","sudo apt update\n\nsudo ufw allow \"\"Nginx Full\"\"\n\nsudo apt install npm build-essential nginx\n\nsudo chown -R $USER:$USER /var/www/example.com/html\nsudo chown -R $USER:$USER /var/www/example.com\n\nsudo chmod -R 777 /var/www/example.com\n\nsudo npm install -g pm2 serve\n\ncd /var/www/html\n\npm2 serve frontend --name frontend Port\n\nsudo nano /etc/nginx/sites-available/default\n\n# Code\nserver {\n\tlisten 80;\n\t\n\tserver_name ip_address;\n\n\tlocation / {\n\t\tproxy_pass http://localhost:Port;\n        \tproxy_http_version 1.1;\n        \tproxy_set_header Upgrade $http_upgrade;\n        \tproxy_set_header Connection \"\"upgrade\"\";\n        \tproxy_set_header Host $host;\n        \tproxy_cache_bypass $http_upgrade;\n\n        \ttry_files $uri $uri/ /index.html;\n\t}\n}\n# End Code\n\nsudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled\n","npm install -g expo-cli\n\nexpo init","AsyncStorage.getAllKeys((err, keys) => {\n\t\t\tAsyncStorage.multiGet(keys, (err, stores) => {\n\t\t    \tstores.forEach(function (store) {\n                    if (store[0] == \"\"userid\"\") {\n                        self.setState({ \"\"userid\"\": store[1] })\n                    }\n                })\n\n\t\t\t\tthis.setState({ \"\"content_loaded\"\": true })\n\t\t  \t});\n\t\t});","sudo apt update\n\nsudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib\n\nsudo apt install python3-venvls\n\nmkdir ~/appname\n\ncd ~/appname\n\npython3 --version\n\npython3.version -m venv appnameenv\n\nsource appnameenv/bin/activate\n\npip install django gunicorn psycopg2-binary\n\ndjango-admin.py startproject appname ~/appnamedir\n\nnano ~/appnamedir/appname/settings.py\n\n# Code\nALLOWED_HOSTS = [\"\"your_server_domain_or_IP\"\", \"\"second_domain_or_IP\"\", . . ., \"\"localhost\"\"]\n\nDATABASES = {\n    \"\"default\"\": {\n        \"\"ENGINE\"\": \"\"django.db.backends.postgresql_psycopg2\"\",\n        \"\"NAME\"\": \"\"appname\"\",\n        \"\"USER\"\": \"\"appnameuser\"\",\n        \"\"PASSWORD\"\": \"\"password\"\",\n        \"\"HOST\"\": \"\"localhost\"\",\n        \"\"PORT\"\": \"\"\"\",\n    }\n}\n\nSTATIC_URL = \"\"/static/\"\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"\"static/\"\")\n# End Code\n\nsudo nano ~/appnamedir/views.py\n\n# Code\nfrom django.middleware.csrf import get_token\n\ndef csrf_token(request):\n\treturn JsonResponse({ \"\"error\"\": False, \"\"csrfToken\"\": get_token(request) })\n# End Code\n\n# Code\nfrom django.db import connection\n\ndef sql_query(query, fetchtype):\n\tcursor = connection.cursor()\n\n\ttry:\n\t\tcursor.execute(\"SELECT * FROM table\")\n\n\t\tif fetchtype == \"\"one\"\":\n\t\t\tresult = cursor.fetchone()\n\t\telif fetchtype == \"\"all\"\":\n\t\t\tresult = cursor.fetchall()\n\t\telse:\n\t\t\tresult = int(cursor.fetchone()[\"\"count(*)\"\"])\n\tfinally:\n\t\tcursor.close()\n\n    return result if fetchtype == \"\"one\"\" or fetchtype == \"\"count\"\" else results\n# End Code\n\n/ Install PostgreSQL\npg_ctl -D /usr/local/var/postgres start\n\nrm -r /usr/local/var/postgres\n\ninitdb /usr/local/var/postgres\n\ncreatedb appname\n\npsql appname\n\ncreate role \"\"user\"\" with login password \"\"\"\";\n\ngrant all privileges on database \"\"database_name\"\" to \"\"user\"\"\n\npython manage.py migrate\n\npython manage.py makemigrations appname\n\npython manage.py sqlmigrate appname 0001\n\npython manage.py migrate\n\npython manage.py runserver 0.0.0.0:8000\n","sudo apt update\n\nsudo apt install python3-pip python3-dev build-essential libssl-dev libffi-dev python3-setuptools\n\nsudo apt install python3-venv\n\nmkdir ~/appname\n\ncd ~/appname\n\npython3 --version\n\npython3.version -m venv appnameenv\n\nsource appnameenv/bin/activate\n\npip install gunicorn flask psycopg2-binary(database access)\n\nnano ~/appname/appname.py\n\n# Code\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"<h1 style=\"\"color:blue\"\">Hello There!</h1>\"\n\nif __name__ == \"__main__\":\n    app.run(host=\"\"0.0.0.0\"\")\n# End Code\n\nnano ~/appname/wsgi.py\n\n# Code\nfrom appname import app\n\nif __name__ == \"__main__\":\n    app.run()\n# End Code\n\ndeactivate\nsudo nano /etc/systemd/system/appname.service\n\n# Code\n[Unit]\nDescription=Gunicorn instance to serve appname\nAfter=network.target\n\n[Service]\nUser=kevin\nGroup=www-data\nWorkingDirectory=/home/kevin/appname\nEnvironment=\"PATH=/home/kevin/appname/appnameenv/bin\"\nExecStart=/home/kevin/appname/appnameenv/bin/gunicorn --workers 3 --bind unix:appname.sock -m 007 wsgi:app\n\n[Install]\nWantedBy=multi-user.target\n# End Code\n\nsudo systemctl start appname\nsudo systemctl enable appname\n\nCreated symlink /etc/systemd/system/multi-user.target.wants/appname.service â†’ /etc/systemd/system/appname.service.\n\nsudo nano /etc/nginx/sites-available/default\n\n# Code\nserver {\n    listen 80;\n    server_name ip_address;\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/home/user/appname/appname.sock;\n    }\n}\n# End Code\n\nsudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled\nsudo systemctl restart nginx\nsudo ufw allow \"\"Nginx Full\"\"\n\n/ Install PostgreSQL\nsudo apt update\n\nsudo apt install postgresql postgresql-contrib libpq-dev\n\nsudo -u postgres psql\n\ncreate user myuser with encrypted password \"\"mypass\"\";\n\ngrant all privileges on database mydb to myuser;\n\n# Code\nfrom flask_sqlalchemy import SQLAlchemy\nimport pymysql.cursors\n\napp = Flask(__name__)\n\napp.debug = True\napp.config[\"\"SQLALCHEMY_DATABASE_URI\"\"] = \"\"mysql://geottuseuser:G3ottu53?@localhost/database_name\"\"\napp.config[\"\"SQLALCHEMY_TRACK_MODIFICATIONS\"\"] = False\napp.config[\"\"MYSQL_DATABASE_USER\"\"] = \"\"geottuseuser\"\"\napp.config[\"\"MYSQL_DATABASE_PASSWORD\"\"] = \"\"G3ottu53?\"\"\napp.config[\"\"MYSQL_DATABASE_DB\"\"] = \"\"database_name\"\"\n\ndb = SQLAlchemy(app)\nconnection = pymysql.connect(host=\"\"localhost\"\", user=\"\"geottuseuser\"\", password=\"\"G3ottu53?\"\", db=\"\"vloggu\"\", cursorclass=pymysql.cursors.DictCursor, autocommit=True)\ncursor = connection.cursor()\n\nclass Users(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    userid = db.Column(db.String(50), unique=True)\n    username = db.Column(db.String(50), unique=True)\n    profilepicture = db.Column(db.String(100))\n    cellnumber = db.Column(db.String(50), unique=True)\n    password = db.Column(db.String(100), unique=True)\n    channelname = db.Column(db.String(50))\n    about = db.Column(db.String(200))\n    followers = db.Column(db.Text)\n    likes = db.Column(db.Text)\n    dislikes = db.Column(db.Text)\n\n    def __init__(self, userid, username, profilepicture, cellnumber, password, channelname, about, followers, likes, dislikes):\n        self.userid = userid\n        self.username = username\n        self.profilepicture = profilepicture\n        self.cellnumber = cellnumber\n        self.password = password\n        self.channelname = channelname\n        self.about = about\n        self.followers = followers\n        self.likes = likes\n        self.dislikes = dislikes\n\n    def __repr__(self):\n        return \"\"<Users %r>\"\" % self.username\n\nclass Vlogs(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    vlogid = db.Column(db.String(50), unique=True)\n    creatorid = db.Column(db.String(50))\n    creatorname = db.Column(db.String(50))\n    source = db.Column(db.String(100))\n    snapshot = db.Column(db.String(100))\n    seconds = db.Column(db.String(2))\n    channelname = db.Column(db.String(50))\n    about = db.Column(db.String(200))\n    likes = db.Column(db.Text)\n    dislikes = db.Column(db.Text)\n    comments = db.Column(db.Text)\n\n    def __init__(self, vlogid, creatorid, creatorname, source, snapshot, seconds, channelname, about, likes, dislikes, comments):\n        self.vlogid = vlogid\n        self.creatorid = creatorid\n        self.creatorname = creatorname\n        self.source = source\n        self.snapshot = snapshot\n        self.seconds = seconds\n        self.channelname = channelname\n        self.about = about\n        self.likes = likes\n        self.dislikes = dislikes\n        self.comments = comments\n\n    def __repr__(self):\n        return \"\"<Vlogs %r>\"\" % self.name\n\n\ncursor.execute(\"select * from vlogs where id < \" + str(render_point) + \" order by id desc limit 3\")\nall_vlogs = cursor.fetchall()\n# End Code\n/ End Install PostgreSQL\n","adduser kevin\n\nusermod -aG sudo kevin\n\nufw app list\n\nufw allow OpenSSH\n\nufw enable\n\nrsync --archive --chown=user:user ~/.ssh /home/user\n\nexit and login with new user\n\n\n# SSL Configuration\n    listen 443 ssl;\n\n    ssl_certificate /root/.ssl/geottuse.com.pem;\n    ssl_certificate_key /root/.ssl/geottuse.com.key;\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"\"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"\";\n    # End SSL Configuration\n\n# on computer\nadd ip_address hostname.com to /etc/hosts","curl https://sh.rustup.rs -sSf | sh\n\nsource $HOME/.cargo/env\n\nrustup toolchain install nightly\n\nrustup default nightly\n\ncargo run --release\n\nsudo nano /etc/systemd/system/appname.service\n\n[Unit]\nDescription=Application to serve appname\n\n[Service]\nUser=kevin\nGroup=www-data\nWorkingDirectory=/home/kevin/appname\nEnvironment=\"ROCKET_ENV=prod\"\nEnvironment=\"ROCKET_ADDRESS=0.0.0.0\"\nEnvironment=\"ROCKET_PORT=8000\"\nEnvironment=\"ROCKET_LOG=critical\"\nExecStart=/home/kevin/appname/target/release/appname\n\n[Install]\nWantedBy=multi-user.target","sudo apt update\n\nsudo apt install mysql-server libmysqlclient-dev\n\nsudo mysql_secure_installation\n\n# Create new root user for production mode\nsudo mysql -u root\n\nDROP USER \"\"root\"\"@\"\"localhost\"\";\n\nCREATE USER \"\"root\"\"@\"\"%\"\" IDENTIFIED BY \"\"\"\";\n\nGRANT ALL PRIVILEGES ON *.* TO \"\"root\"\"@\"\"%\"\" WITH GRANT OPTION;\n\nFLUSH PRIVILEGES;","this is the installation of mysql","sudo apt update\n\nsudo apt install nginx\n\nsudo ufw allow \"\"Nginx Full\"\"","sudo apt install nodejs npm build-essential\n\nsudo npm i -g pm2 serve\n\npm2 startup systemd\n\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u user --hp /home/user\n\npm2 save\n\nsudo systemctl start pm2-user\n\n# Code\nserver {\n\tlisten 80;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"\"upgrade\"\";\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n# End Code\n\npm2 restart appname","# Create new user and give permission to login\nsu - postgres\n\npsql postgres\n\ncreate role user with login password \"\"\"\";\n\n# Export\npg_dump database > database.sql\n\n# Import\npsql database < database.sql\n","# Generate a CSR and Private Key\ncd ~\n\nopenssl req -newkey rsa:2048 -nodes -keyout example.com.key -out example.com.csr\n\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:New York\nLocality Name (eg, city) []:New York\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:My Company\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:example.com\nEmail Address []:sammy@example.com\n\ncat example.com.csr\n\ncd ~\n\ncat example.com.crt intermediate.crt > example.com.chained.crt\n\nserver {\n\tlisten 80;\n\tlisten 443 ssl;\n\n\tif ($scheme != \"https\") {\n\t\treturn 301 https://$host$request_uri;\n\t}\n\n\tserver_name example.com www.example.com;\n\n\troot /var/www/html/example;\n\tindex index.htm index.html;\n\n\tssl_certificate /root/.ssl/geottuse.com.crt;\n\tssl_certificate_key /root/.ssl/geottuse.com.key;\n\n\tssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\tssl_prefer_server_ciphers on;\n\tssl_ciphers \"\"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"\";\n\n\tlocation / {\n        \ttry_files $uri $uri/ =404;\n\t}\n}\n\nsudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled\n\n\n# Create .pem file (if domain_name.chained.crt fails) with three files\n\n-----BEGIN CERTIFICATE----- \n(Your Primary SSL certificate: domain_name.crt) \n-----END CERTIFICATE----- \n-----BEGIN CERTIFICATE----- \n(Your Intermediate certificate: intermediate.crt) \n-----END CERTIFICATE----- \n-----BEGIN CERTIFICATE----- \n(Your Root certificate: domain_name.chained.crt) \n-----END CERTIFICATE-----\n","cd into expo project directory\n\n// install dependency with npm\n\nexpo eject\nexpo start\n\ncd into ios directory\n\nsudo gem uninstall cocoapods\n\nsudo gem install cocoapods -v 1.5.3\n\nsudo xcode-select --switch /Applications/Xcode.app\n\npod install\n\nopen .xcworkspace\n","\n\t\t\tdocument.getElementById(\"confirmation-progressing\").style.display = \"\"block\"\"\n\n\t\t\tvar hidden_box = document.getElementById(\"hidden_box\")\n\t\t\tvar confirmation_box = document.getElementById(\"confirmation_box\")\n\t\t\tvar error_box = document.getElementById(\"error_box\")\n\t\t\tvar confirmation_header = document.getElementById(\"confirmation-header\")\n\t\t\tvar error_header = document.getElementById(\"error-header\")\n\t\t\tvar files_list = document.getElementById(\"confirmation-fileslist\")\n\t\t\tvar fsUtils = require(\"nodejs-fs-utils\");\n\t\t\tvar fs = require(\"\"fs-extra\"\")\n\t\t\tvar rimraf = require(\"\"rimraf\"\");\n\t\t\tvar os = require(\"\"os\"\")\n\t\t\tvar zipfolder = require(\"\"zip-folder\"\")\n\t\t\tvar form_data = new FormData()\n\t\t\tvar committing_files = new Array()\n\t\t\tvar folder_name = \"\", folder_name_length = Math.floor(Math.random() * 20) + 10, k, sync_dir, create_folder = false, dir_file, file_size, sizes = 0\n\n\t\t\tif (file_name == \"\"all\"\") {\n\t\t\t\tcommitting_files = added_files\n\t\t\t} else {\n\t\t\t\tadded_files.forEach(function (info) {\n\t\t\t\t\tif (info.file_name == file_name) {\n\t\t\t\t\t\tcommitting_files.push(info)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tcommitting_files.forEach(function (info) {\n\t\t\t\tif (local_path != \"\") {\n\t\t\t\t\tfile_size = fsUtils.fsizeSync(user_repos + \"/\" + local_path.join(\"/\") + \"/\" + info.file_name);\n\t\t\t\t} else {\n\t\t\t\t\tfile_size = fsUtils.fsizeSync(user_repos + \"/\" + info.file_name)\n\t\t\t\t}\n\n\t\t\t\tsizes += file_size\n\t\t\t})\n\n\t\t\tif (sizes <= 10000000) {\n\t\t\t\tsync_dir = fs.readdirSync(committing_folder)\n\n\t\t\t\tif (sync_dir.length > 0) {\n\t\t\t\t\tfolder_name = sync_dir[0]\n\t\t\t\t} else {\n\t\t\t\t\tfor (k = 1; k <= folder_name_length; k++) {\n\t\t\t\t\t\tfolder_name += (Math.floor(Math.random() * 9) + 0) / 2 == 0 ? (Math.floor(Math.random() * 9) + 0) : letter[Math.floor(Math.random() * 25) + 0]\n\t\t\t\t\t}\n\n\t\t\t\t\tfs.mkdirSync(committing_folder + \"/\" + folder_name)\n\n\t\t\t\t\tcreate_folder = true\n\t\t\t\t}\n\n\t\t\t\tcommitting_files.forEach(function (info) {\n\t\t\t\t\tif (info.dir.length > 0) {\n\t\t\t\t\t\tfs.copySync(user_repos + \"/\" + info.dir.join(\"/\") + \"/\" + info.file_name, committing_folder + \"/\" + folder_name + \"/\" + info.rename_file)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfs.copySync(user_repos + \"/\" + info.file_name, committing_folder + \"/\" + folder_name + \"/\" + info.rename_file)\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\tif (create_folder) {\n\t\t\t\t\tfs.writeFileSync(committing_folder + \"/directories.txt\", JSON.stringify(committing_files))\n\t\t\t\t\tfs.copyFileSync(committing_folder + \"/directories.txt\", committing_folder + \"/\" + folder_name + \"/directories.txt\")\n\t\t\t\t\tfs.unlinkSync(committing_folder + \"/directories.txt\")\n\t\t\t\t} else {\n\t\t\t\t\tdir_file = fs.readFileSync(committing_folder + \"/\" + folder_name + \"/directories.txt\")\n\t\t\t\t\tdir_file = JSON.parse(dir_file)\n\t\t\t\t\tdir_file.push(committing_files[0])\n\t\t\t\t\tdir_file = JSON.stringify(dir_file)\n\n\t\t\t\t\tfs.writeFileSync(committing_folder + \"/\" + folder_name + \"/directories.txt\", dir_file)\n\t\t\t\t}\n\n\t\t\t\tzipfolder(committing_folder + \"/\" + folder_name, committing_folder + \"/\" + folder_name + \".zip\", function (err) {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\trmdir(committing_folder + \"/\" + folder_name, function (err) {\n\t\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\t\tdata = committing_folder + \"/\" + folder_name + \".zip\"\n\t\t\t\t\t\t\t\timage_data = fs.readFileSync(data)\n\t\t\t\t\t\t\t\timage_data = image_data.toString(\"\"base64\"\")\n\t\t\t\t\t\t\t\tdata_uri = \"\"data:application/zip;base64,\"\" + image_data\n\t\t\t\t\t\t\t\tfile = dataURItoBlob(data_uri, \"\"files.zip\"\", \"\"application/zip\"\")\n\n\t\t\t\t\t\t\t\tform_data.append(\"\"userid\"\", userid)\n\t\t\t\t\t\t\t\tform_data.append(\"\"commit_file\"\", file, folder_name + \".zip\")\n\t\t\t\t\t\t\t\tfs.unlinkSync(committing_folder + \"/\" + folder_name + \".zip\")\n\n\t\t\t\t\t\t\t\tfetch(\"\"https://www.synchub.ca/user/commit_file\"\", {\n\t\t\t\t\t\t            method: \"\"POST\"\",\n\t\t\t\t\t\t            body: form_data\n\t\t\t\t\t\t        })\n\t\t\t\t\t\t        .then((response) => response.json())\n\t\t\t\t\t\t        .then((response) => {\n\t\t\t\t\t\t        \tvar error = response.error\n\t\t\t\t\t\t        \tvar error_type, repos_size\n\n\t\t\t\t\t\t        \tif (!error) {\n\t\t\t\t\t\t        \t\trepos_size = response.repos_size\n\n\t\t\t\t\t\t        \t\tdocument.getElementById(\"committed-size\").innerHTML = repos_size + \" of 10 MB used\"\n\n\t\t\t\t\t\t        \t\tif (local_path.join(\"/\") == committed_path.join(\"/\")) {\n\t\t\t\t\t\t\t        \t\tcommitting_files.forEach(function (info) {\n\t\t\t\t\t\t\t        \t\t\tcommitted_files.push(info)\n\t\t\t\t\t\t\t        \t\t})\n\t\t\t\t\t\t\t        \t}\n\n\t\t\t\t\t\t        \t\tlocal_files.forEach(function (info) {\n\t\t\t\t\t        \t\t\t\tadded_files.forEach(function ({ file_name, dir }, index) {\n\t\t\t\t\t        \t\t\t\t\tif (info.dir.join(\"/\") + \"/\" + info.file_name == dir.join(\"/\") + \"/\" + file_name) {\n\t\t\t\t\t        \t\t\t\t\t\tinfo.added = false\n\t\t\t\t\t        \t\t\t\t\t\tadded_files.splice(index, 1)\n\t\t\t\t\t        \t\t\t\t\t}\n\t\t\t\t\t        \t\t\t\t})\n\t\t\t\t\t\t        \t\t})\n\n\t\t\t\t\t\t        \t\treset_interface()\n\t\t\t\t\t\t\t        \tclose_hidden_box()\n\t\t\t\t\t\t\t        \tshow_success_box(\"successfully committed\")\n\t\t\t\t\t\t        \t} else {\n\t\t\t\t\t\t        \t\tconfirmation_box.style.display = \"\"none\"\"\n\t\t\t\t\t\t        \t\terror_box.style.display = \"\"block\"\"\n\t\t\t\t\t\t        \t\terror_type = response.error_type\n\n\t\t\t\t\t\t        \t\tswitch (error_type) {\n\t\t\t\t\t\t        \t\t\tcase \"limit\":\n\t\t\t\t\t\t        \t\t\tcase \"invalid repository\":\n\t\t\t\t\t\t        \t\t\t\terror_header.innerHTML = \"You are currently on a trial plan so you are only limited to have 1 repository\"\n\t\t\t\t\t\t        \t\t\t\tbreak\n\t\t\t\t\t\t        \t\t\tcase \"over sized\":\n\t\t\t\t\t\t        \t\t\t\terror_header.innerHTML = \"You are only limited to have 10 MB of data in a repository\"\n\n\t\t\t\t\t\t        \t\t\t\tbreak\n\t\t\t\t\t\t        \t\t}\n\n\t\t\t\t\t\t        \t\tdocument.getElementById(\"confirmation-progressing\").style.display = \"none\"\n\t\t\t\t\t\t\t        }\n\t\t\t\t\t\t        })\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tconfirmation_box.style.display = \"\"none\"\"\n\t\t\t\terror_box.style.display = \"\"block\"\"\n\t\t\t\terror_header.innerHTML = \"The file/folder you are committing is over sized\"\n\n\t\t\t\tdocument.getElementById(\"confirmation-progressing\").style.display = \"none\"\n\t\t\t}","mark text: shift+ctrl+6","import React, { Component } from \"\"react\"\"\nimport { AsyncStorage, StyleSheet, Text, View } from \"\"react-native\"\"\nimport { createAppContainer, createStackNavigator } from \"\"react-navigation\"\"\nimport * as FileSystem from \"\"expo-file-system\"\";\n\nimport first from \"\"./screens/first\"\"\nimport login from \"\"./screens/login\"\"\nimport register from \"\"./screens/register\"\"\nimport verify from \"\"./screens/verify\"\"\nimport agreement from \"\"./screens/agreement\"\"\nimport recoveraccount from \"\"./screens/recoveraccount\"\"\n\nimport myprojects from \"\"./screens/myprojects\"\"\nimport projects from \"\"./screens/projects\"\"\nimport createproject from \"\"./screens/createproject\"\"\nimport editproject from \"\"./screens/editproject\"\"\nimport contribute from \"\"./screens/contribute\"\"\nimport viewproject from \"\"./screens/viewproject\"\"\n\nimport editcreditcard from \"\"./screens/editcreditcard\"\"\nimport editbankaccount from \"\"./screens/editbankaccount\"\"\nimport terms from \"\"./screens/terms\"\"\nimport policy from \"\"./screens/policy\"\"\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            userid: \"\",\n            agreed: \"false\",\n            content_loaded: false\n        }\n\n        //AsyncStorage.clear()\n\n/*\n        FileSystem.readDirectoryAsync(FileSystem.documentDirectory).then(photos => {\n            photos.forEach(function (photo) {\n                if (photo.replace(\".\", \"\") != photo && photo != \"\"RCTAsyncLocalStorage\"\") {\n                    FileSystem.deleteAsync(FileSystem.documentDirectory + \"\"/\"\" + photo);\n                }\n            });\n        });*/\n\n        var self = this\n\n        AsyncStorage.getAllKeys((err, keys) => {\n            AsyncStorage.multiGet(keys, (err, stores) => {\n                stores.forEach(function (store) {\n                    if (store[0] == \"\"userid\"\") {\n                        self.setState({ \"\"userid\"\": store[1] })\n                    } else if (store[0] == \"\"agreed\"\") {\n                        self.setState({ \"\"agreed\"\": store[1] })\n                    }\n                })\n\n                this.setState({ \"\"content_loaded\"\": true })\n            });\n        });\n    }\n    render() {\n        var { userid, agreed, content_loaded } = this.state\n\n        if (content_loaded) {\n            if (userid) {\n                if (agreed == \"true\") {\n                    return <LoggedInContainer/>\n                } else {\n                    return <AgreementContainer/>\n                }\n            } else {\n                return <UnloggedInContainer/>\n            }\n        }\n\n        return null\n    }\n}\n\nconst Stack = {\n    first: { screen: first },\n    login: { screen: login },\n    register: { screen: register },\n    verify: { screen: verify },\n    agreement: { screen: agreement },\n    recoveraccount: { screen: recoveraccount },\n    myprojects: { screen: myprojects },\n    projects: { screen: projects },\n    createproject: { screen: createproject },\n    editproject: { screen: editproject },\n    contribute: { screen: contribute },\n    viewproject: { screen: viewproject },\n    editcreditcard: { screen: editcreditcard },\n    editbankaccount: { screen: editbankaccount },\n    terms: { screen: terms },\n    policy: { screen: policy }\n}\n\nconst UnloggedInStack = createStackNavigator(Stack, { initialRouteName: \"\"first\"\" })\nconst AgreementStack = createStackNavigator(Stack, { initialRouteName: \"\"agreement\"\" })\nconst LoggedInStack = createStackNavigator(Stack, { initialRouteName: \"\"projects\"\" })\n\nconst UnloggedInContainer = createAppContainer(UnloggedInStack)\nconst AgreementContainer = createAppContainer(AgreementStack)\nconst LoggedInContainer = createAppContainer(LoggedInStack)\n","import * as RNIap from \"\"react-native-iap\"\";\n\nconst itemSkus = Platform.select({\n    ios: [\"\"2312313123\"\",\"\"255349394\"\"]\n});\n\nvar itemID = {\"\"5\"\":\"\"2312313123\"\",\"\"10\"\":\"\"255349394\"\"}\n\n\nconstructor(props) {\n    super(props)\n\n    try {\n        RNIap.getProducts(itemSkus).then((products) => {\n            this.setState({ \"\"products\"\": products })\n        })\n    } catch (err) {\n\n    }\n}\n\n\ntry {\n\tpurchase = await RNIap.buyProduct(itemID[\"\"5\"\"]);\n} catch(error) {\n\t\n}\n","uploadPhoto(uri, name) {\n\t\tvar data = new FormData();\n\n\t\tdata.append(\"\"photo\"\", { uri: uri, name: name });\n\n\t\tfetch(link + \"/app/member/upload_photo\", {\n            method: \"\"POST\"\",\n            headers: {\n                \"\"Accept\"\": \"\"application/json\"\",\n                \"\"Content-Type\"\": \"\"multipart/form-data\"\"\n            },\n            body: data\n        })\n        .then((response) => response.json())\n        .then((response) => {\n            var error = response.error;\n\n            if (!error) {\n                this.setState({ \"\"photo_uploaded\"\": true });\n            }\n        })\n        .catch((error) => {\n            \n        });\n\t}","snapProfile = async function() {\n    \tvar photo_info = { photo: \"\"\"\", width: 0, height: 0 };\n\t\tvar dimensions = Dimensions.get(\"\"window\"\");\n\t\tvar d_height = (dimensions.height * 60) / 100;\n\t\tvar letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\t    var photo_name_length = Math.floor(Math.random() * (15 - 10)) + 10;\n\t    var photo_name = \"\", photo_path;\n\t    var k, char = \"\";\n\n\t\tif (this.camera) {\n\t\t\tvar options = { quality: 0.5, base64: true, allowsEditing: true };\n      \t\tvar photo = await this.camera.takePictureAsync(options);\n      \t\tvar cameraFlip = this.state.cameraFlip;\n\n      \t\tif (cameraFlip == \"\"front\"\") {\n      \t\t\tphoto = await ImageManipulator.manipulate(\n\t  \t\t\t\tphoto.localUri || photo.uri,\n\t      \t\t\t[\n\t      \t\t\t\t{ resize: { width: dimensions.width, height: d_height }},\n\t      \t\t\t\t{ flip: { horizontal: true }}\n\t      \t\t\t],\n\t      \t\t\t{ format: \"\"jpg\"\" });\n      \t\t} else {\n      \t\t\tphoto = await ImageManipulator.manipulate(\n\t  \t\t\t\tphoto.localUri || photo.uri,\n\t      \t\t\t[\n\t      \t\t\t\t{ resize: { width: dimensions.width, height: d_height }}\n\t      \t\t\t],\n\t      \t\t\t{ format: \"\"jpg\"\" });\n      \t\t}\n\t      \t\t\n            for (k = 0; k <= photo_name_length - 1; k++) {\n                if (k % 2 == 0) {\n                    char += \"\" + letters[Math.floor(Math.random() * letters.length)].toUpperCase();\n                } else {\n                    char += \"\" + (Math.floor(Math.random() * 9) + 0);\n                }\n            }\n\n            photo_path = photo.uri;\n            photo_name = char + \".jpg\";\n\n            FileSystem.moveAsync({\n            \tfrom: photo_path,\n            \tto: `${FileSystem.documentDirectory}/${photo_name}`\n            }).then(() => {\n            \tvar photo_info = { photo: photo_name, width: dimensions.width, height: d_height };\n    \t\t\tvar photo_uri = `${FileSystem.documentDirectory}/${photo_name}`;\n\n                this.uploadPhoto(photo_uri, photo_info.photo);\n    \t\t\tthis.setState({ \"\"photo_info\"\": photo_info, \"\"photo_uri\"\": photo_uri });\n            });\n\t\t}\n\t}","choose = async () => {\n    \tvar dimensions = Dimensions.get(\"\"window\"\");\n    \tvar d_height = (dimensions.height * 60) / 100;\n    \tvar letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\t\tvar photo_name_length = Math.floor(Math.random() * (15 - 10)) + 10;\n\t\tvar photo_name = \"\", photo_path;\n\t\tvar k, char = \"\";\n    \tvar { status } = await Permissions.askAsync(Permissions.CAMERA_ROLL, {\n\n    \t});\n\n    \tif (status === \"\"granted\"\") {\n    \t\tvar options = { quality: 0.5, base64: true, allowsEditing: false };\n    \t\tvar photo = await ImagePicker.launchImageLibraryAsync(options);\n    \t\tvar width, height, margin_top;\n\n    \t\tif (!photo.cancelled) {\n\t    \t\twidth = photo.width;\n\t    \t\theight = photo.height;\n\n\t    \t\tif ((width * height) > (dimensions.width * d_height)) {\n            \t\tif (width > height) {\n\t            \t\theight = (dimensions.width * height) / width;\n\t            \t\twidth = dimensions.width;\n\t            \t} else if (width < height) {\n\t            \t\twidth = (d_height * width) / height;\n\t            \t\theight = d_height;\n\t            \t} else {\n\t            \t\twidth = dimensions.width;\n\t            \t\theight = width;\n\t            \t}\n            \t}\n\n            \tmargin_top = (d_height - height) / 2;\n\n\t    \t\tphoto = await ImageManipulator.manipulate(\n\t  \t\t\t\tphoto.localUri || photo.uri,\n\t      \t\t\t[{ resize: { width: width, height: d_height }}],\n\t      \t\t\t{ format: \"\"jpg\"\" });\n\n\t    \t\tfor (k = 0; k <= photo_name_length - 1; k++) {\n\t                if (k % 2 == 0) {\n\t                    char += \"\" + letters[Math.floor(Math.random() * letters.length)].toUpperCase();\n\t                } else {\n\t                    char += \"\" + (Math.floor(Math.random() * 9) + 0);\n\t                }\n\t            }\n\n\t            photo_path = photo.uri;\n\t            photo_name = char + \".jpg\";\n\n\t    \t\tFileSystem.moveAsync({\n\t    \t\t\tfrom: photo_path,\n\t    \t\t\tto: `${FileSystem.documentDirectory}/${photo_name}`\n\t    \t\t}).then(() => {\n\t    \t\t\tvar photo_info = { photo: photo_name, width: dimensions.width, height: d_height };\n\t    \t\t\tvar photo_uri = `${FileSystem.documentDirectory}/${photo_name}`;\n\n\t    \t\t\tthis.uploadPhoto(photo_uri, photo_info.photo);\n\t    \t\t\tthis.setState({ \"\"photo_info\"\": photo_info, \"\"photo_uri\"\": photo_uri });\n\t    \t\t\tthis.refs.browse_profile_picture_box.open();\n\t    \t\t});\n    \t\t}\n    \t}\t\n  \t}","import { BrowserRouter, Redirect, Route, Switch } from \"\"react-router-dom\"\";\nimport { isMobile } from \"\"react-device-detect\"\";\n\nimport Home from \"\"./pages/home\"\";\nimport PreTerms from \"\"./pages/pre_terms\"\";\nimport PrePolicy from \"\"./pages/pre_policy\"\";\nimport AccountSetup from \"\"./pages/accountsetup\"\";\n\nif (!isMobile) {\n\t\t\treturn (\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/\" exact render={props => (\n\t\t\t\t\t\t\t\tuserid !== \"\"\"\" && userid !== null ? \n\t\t\t\t\t\t\t\t\tartists !== \"\"[]\"\" && artists !== null ? \n\t\t\t\t\t\t\t\t\t<Redirect to={{ pathname: \"\"/news\"\" }}/>\n\t\t\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t\t<Redirect to={{ pathname: \"\"/accountsetup/\"\" + userid }}/>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t<Redirect to={{ pathname: \"\"/Home\"\" }}/>\n\t\t\t\t\t\t\t)}/>\n\t\t\t\t\t\t\t<Route path=\"/home\" component={Home}/>\n\t\t\t\t\t\t\t<Route path=\"/accountsetup/:userid\" component={AccountSetup}/>\n\t\t\t\t\t\t\t<Route path=\"/photo_competition\" component={PhotoCompetition}/>\n\t\t\t\t\t\t\t<Route path=\"/news\" component={News}/>\n\t\t\t\t\t\t\t<Route path=\"/profilepage/:userid\" component={ProfilePage}/>\n\t\t\t\t\t\t\t<Route path=\"/people\" component={People}/>\n\t\t\t\t\t\t\t<Route path=\"/reset_password/:email\" component={ResetPassword}/>\n\t\t\t\t\t\t\t<Route path=\"/terms\" component={Terms}/>\n\t\t\t\t\t\t\t<Route path=\"/pre_terms\" component={PreTerms}/>\n\t\t\t\t\t\t\t<Route path=\"/policy\" component={Policy}/>\n\t\t\t\t\t\t\t<Route path=\"/pre_policy\" component={PrePolicy}/>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</BrowserRouter>\n\t\t\t);\n\t\t} else {\n\t\t\twindow.location = \"\"http://app.geottuse.com\"\";\n\t\t}","browseProfilePicture(profilepicture) {\n\tvar letters = [\n\t\t\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \n\t\t\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\n\t];\n\tvar data = new FormData();\n\tvar { browseprofilepicture } = this.state;\n\tvar reader = new FileReader(), image = new Image();\n\tvar file = profilepicture.target.files[0];\n\tvar width, height, photo_name = \"\", photo_type;\n\tvar k, photo_name_length = Math.floor(Math.random() * (15 - 10)) + 10;\n\n\treader.onload = () => {\n\t\timage.onload = () => {\n\t\t\twidth = image.width;\n\t\t\theight = image.height;\n\n\t\t\t// all equal size\n\t\t\tif (width === height) {\n\t\t\t\tphoto_width = 220\n\t\t\t\tphoto_height = 220\n\t\t\t} else {\n\t\t\t\tif (width > height) {\n\t\t\t\t\tphoto_width = 220\n\t\t\t\t\tphoto_height = (height * photo_width) / width\n\n\t\t\t\t\tif (photo_height > 220) {\n\t\t\t\t\t\tphoto_width = (photo_width - (photo_height - 220))\n\t\t\t\t\t\tphoto_height = 220\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tphoto_height = 220\n\t\t\t\t\tphoto_width = (width * photo_height) / height\n\n\t\t\t\t\tif (photo_width > 220) {\n\t\t\t\t\t\tphoto_height = (photo_height - (photo_width - 220))\n\t\t\t\t\t\tphoto_width = 220\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// one is greater\n\t\t\tif (width === height) {\n\t\t\t\tphoto_width = 200\n\t\t\t\tphoto_height = 200\n\t\t\t} else {\n\t\t\t\tif (width > height) {\n\t\t\t\t\tphoto_width = 300\n\t\t\t\t\tphoto_height = (height * photo_width) / width\n\n\t\t\t\t\tif (photo_height > 200) {\n\t\t\t\t\t\tphoto_width = (photo_width - (photo_height - 200))\n\t\t\t\t\t\tphoto_height = 200\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tphoto_height = 200\n\t\t\t\t\tphoto_width = (width * photo_height) / height\n\n\t\t\t\t\tif (photo_width > 300) {\n\t\t\t\t\t\tphoto_height = (photo_height - (photo_width - 300))\n\t\t\t\t\t\tphoto_width = 200\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tswitch (file.type) {\n\t\t\t\tcase \"image/jpg\":\n\t\t\t\t\tphoto_type = \".jpg\";\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"image/jpeg\":\n\t\t\t\t\tphoto_type = \".jpeg\";\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"image/png\":\n\t\t\t\t\tphoto_type = \".png\";\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"image/gif\":\n\t\t\t\t\tphoto_type = \".gif\";\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// nothing\n\t\t\t}\n\n\t\t\tfor (k = 0; k <= photo_name_length - 1; k++) {\n                if (k % 2 === 0) {\n                    photo_name += \"\" + letters[Math.floor(Math.random() * letters.length)].toUpperCase();\n                } else {\n                    photo_name += \"\" + (Math.floor(Math.random() * 9) + 0);\n                }\n            }\n\n            browseprofilepicture.photo = photo_name + \"\" + photo_type;\n            document.getElementsByClassName(\"profilepicture-photo\")[0].value = null;\n\t\t\tdata.append(\"\"file\"\", file, browseprofilepicture.photo);\n\t\t\tthis.setState({ \n\t\t\t\t\"\"browseprofilepicture\"\": browseprofilepicture,\n\t\t\t\t\"\"browseprofilepictureloading\"\": true,\n\t\t\t});\n\n\t\t\tfetch(\"\"/web/member/upload_photo\"\", {\n\t\t\t    method: \"\"POST\"\",\n\t\t\t    body: data\n\t\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((response) => {\n\t\t\t\tvar error = response.error;\n\n\t\t\t\tif (!error) {\n\t\t\t\t\tthis.setState({ \n\t\t\t\t\t\t\"\"browseprofilepictureview\"\": reader.result,\n\t\t\t\t\t\t\"\"browseprofilepictureloading\"\": false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).catch((error) => {\n\n\t\t\t});\n\t\t}\n\n\t\timage.src = reader.result;\n\t}\n\n\treader.readAsDataURL(file);\n}","theme: material theme\ncolor scheme: acme color scheme","open /Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl\n\nln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" \n\n/usr/local/bin/sublime\n\nopen ~/.bash_profile\n\nsource ~/.bash_profile\n\nsublime \"\"directory name\"\"/\"\"file name\"\"","childNodes - return collection of node\"\"s child nodes as a list\nchildren - return collection of element child elements as a html collection\nnodeName - return node\"\"s tag name","sudo apt update\n\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\n\ncurl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n\nsudo apt update && sudo apt install yarn\n\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7\n\ncurl -sSL https://get.rvm.io | bash -s stable\n\nrvm install ruby --latest\n\nrvm use version --default\n\ngem install rails\n\nsudo sh -c \"\"echo deb https://oss-binaries.phusionpassenger.com/apt/passenger bionic main > /etc/apt/sources.list.d/passenger.list\"\"\n\nsudo apt update\n\nsudo apt install nginx-extras libnginx-mod-http-passenger\n\nsudo systemctl start nginx\n\nsudo nano /etc/nginx/conf.d/mod-http-passenger.conf\n\n# Code\n### Begin automatically installed Phusion Passenger config snippet ###\npassenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;\npassenger_ruby /home/kevin/.rvm/wrappers/ruby-version/ruby;\n### End automatically installed Phusion Passenger config snippet ###\n# End Code\n\nrvm use\npassenger-config --ruby-command\n\nrails new appname -d mysql\nsudo apt install mysql-server libmysqlclient-dev\n\ncd appname\n\nsudo mysql -uroot\n\nDROP USER \"\"user\"\"@\"\"localhost\"\";\n\nCREATE USER \"\"user\"\"@\"\"localhost\"\" IDENTIFIED BY \"\"\"\";\n\nGRANT ALL PRIVILEGES ON *.* TO \"\"user\"\"@\"\"localhost\"\" WITH GRANT OPTION;\n\nFLUSH PRIVILEGES;\n\ncd appname\n\nsudo nano /etc/nginx/sites-available/default\n\n# Code\nserver {\n\tlisten 80;\n\n  \tserver_name ip_address;\n  \t\n  \tpassenger_enabled on;\n  \tpassenger_app_env development;\n\n  \troot /home/user/appname/public;\n}\n# End Code\n\nsudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled\n\n// ReactJS\nsudo nano Gemfile\n\n# Code\ngem \"\"webpacker\"\"\ngem \"\"react-rails\"\"\n# End Code\n\nbundle install\n\nrails webpacker:install\n\nrails webpacker:install:react\n\nrails g react:install\n\nsudo nano app/views/layouts/application.html.erb\n\n# Code\n<%= javascript_pack_tag \"\"application\"\" %>\n# End Code\n\n// E-mail\nrails g mailer UserMailer\n\nsudo nano app/mailers/user_mailer.rb\n\n# Code\ndef verify_email\n        @email = params[:email]\n\n        delivery_options = { address: \"\"smtp.zoho.com\"\", port: 465, user_name: \"\"$\n\n        mail(to: @email, subject: \"\"Verification E-mail\"\", deliver_me$\nend\n# End Code\n\nsudo nano app/controllers/user_controller.rb\n\n# Code\nUserMailer.with(email: @email).welcome_email.deliver_later\n# End Code\n","# Install Ruby\ncurl -sSL https://get.rvm.io | bash -s stable\nsource ~/.rvm/scripts/rvm\nrvm install ruby --latest\nrvm use 2.6.3 --default\nruby -v\n\n# Install Rails\ngem install rails\n\n# install and setup mysql and create new user with privileges\nbrew install mysql\nCREATE USER \"\"newuser\"\"@\"\"localhost\"\" IDENTIFIED BY \"\"password\"\";\nGRANT ALL PRIVILEGES ON *.* TO \"\"newuser\"\"@\"\"localhost\"\";\n\n# start a new rails project with mysql integrated\nrails new appname -d mysql\nrails -v\n","import * as Facebook from \"\"expo-facebook\"\";\nimport FacebookIcon from \"\"react-native-vector-icons/AntDesign\"\"\n\nvar facebook_app_id = *app_id*\n\ntry {\n\t\t\t\tvar { type, token, expires, permissions, declinedPermissions } = await Facebook.logInWithReadPermissionsAsync(facebook_app_id, {\n\t\t\t\t\tpermissions: [\"\"public_profile\"\", \"\"email\"\"],\n\t\t\t    })\n\n\t\t\t    if (type === \"\"success\"\") {\n\t\t\t    \tvar form_data = new FormData()\n\t\t\t    \tvar response = await fetch(`https://graph.facebook.com/me?fields=name,email&access_token=${token}`);\n\t\t\t    \tvar { name, email } = await response.json()\n\n\t\t\t    \tif (name && email) {\n\t\t\t    \t\tform_data.append(\"\"username\"\", name)\n\t\t\t\t\t\tform_data.append(\"\"email\"\", email)\n\t\t\t\t\t\tform_data.append(\"\"oauth\"\", \"\"facebook\"\")\n\n\t\t\t\t    \t\n\t\t\t    \t}\n\t\t\t    } else {\n\t\t\t    \ttype === \"\"cancel\"\"\n\t\t\t    }\n\t\t\t} catch (error) {\n\n\t\t\t}","import { AuthSession } from \"\"expo\"\"\nimport GitHubIcon from \"\"react-native-vector-icons/AntDesign\"\"\n\nvar github_client_id = *client_id*\nvar github_client_secret = *client_secret*\n\nconst firebaseConfig = {\n    apiKey: \"\"AIzaSyAiyPmVJ_RVU29HlnFO633WwwTdP6BAgfk\"\",\n    authDomain: \"\"prolist-248412.firebaseapp.com\"\",\n    databaseURL: \"\"https://prolist-248412.firebaseio.com\"\",\n    projectId: \"\"prolist-248412\"\",\n    storageBucket: \"\"prolist-248412.appspot.com\"\",\n    messagingSenderId: \"\"622459182710\"\",\n}\n\nasync componentDidMount() {\n\t\tif (!firebase.apps.length) {\n            return firebase.initializeApp(firebaseConfig)\n        }\n\n        firebase.auth().onAuthStateChanged(async auth => {            \n            \n        })\n\t}\n\n\nvar { type, params } = await AuthSession.startAsync({\n\t\t\t\tauthUrl: \"\"https://github.com/login/oauth/authorize?client_id=\"\" + github_client_id + \"\"&scope=user:email\"\"\n\t\t\t})\n\n\t\t\tif (type == \"\"success\"\") {\n\t\t\t\tvar { code } = params\n\t\t\t\t\n\t\t\t\tfetch(\"\"https://github.com/login/oauth/access_token?client_id=\"\" + github_client_id + \"\"&client_secret=\"\" + github_client_secret + \"\"&code=\"\" + code, {\n\t\t\t\t\tmethod: \"\"POST\"\",\n\t\t\t\t\theaders: { \"\"Accept\"\": \"\"application/json\"\" }\n\t\t\t\t})\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((response) => {\n\t\t\t\t\tvar access_token = response.access_token\n\n\t\t\t\t\tif (access_token) {\n\t\t\t\t\t\tthis.userAccess(access_token)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}","# Install MySQL\nbrew install mysql\nbrew services start mysql\n\nif An error occurred while installing mysql2 (0.5.2), and Bundler cannot continue. then\nbundle config --local build.mysql2 \"--with-ldflags=-L/usr/local/opt/openssl/lib --with-cppflags=-I/usr/local/opt/openssl/include\"\n\nsudo bundle install\n\nexport LDFLAGS=\"-L/usr/local/opt/openssl/lib\"\n\nexport CPPFLAGS=\"-I/usr/local/opt/openssl/include\"\n\nsudo gem install mysql2 -v \"\"0.5.2\"\" --source \"\"https://rubygems.org/\"\" -- --with-cppflags=-I/usr/local/opt/openssl/include --with-ldflags=-L/usr/local/opt/openssl/lib\n\nsudo bundle install","# Database & Table Creation\nrails db:create\n\nrails g model member username:string{20} email:string{50} password:string{60} profilepicture:string{60} photos:text favourites:text follows:text chats:text longitude:string{20} latitude:string{20} connectdistance:string{10} block:text blocklocation:text agree:string{5} showlocation:string{3}\n\nrails db:migrate\n\n# Controller Creation\nrails g controller members new create update destroy index show\n\n# Mail Creation\nrails g mailer UserMailer","import pysftp\n\nhost = \"\"\"\"\nport = 3306\nusername = \"\"\"\"\nkey = \"\".key.pem\"\"\npassword = \"\"\"\"\n\ntry:\n\t\tsftp = pysftp.Connection(host=host, username=username, private_key_pass=password, private_key=key)\n\n\t\tdatas = sftp.listdir()\n\n\t\treturn jsonify({ \"\"error\"\": False, \"\"datas\"\": datas })\n\tfinally:\n\t\tvalid = False\n\n\tsftp.close()","ssh-keygen\n\nssh-keygen -p -m PEM -f ~/.ssh/id_rsa","import pymysql.cursors\n\nmysql_host = \"\"localhost\"\"\nmysql_port = 3306\nmysql_user = \"\"geottuseuser\"\"\nmysql_pass = \"\"G3ottu53?\"\"\nmysql_db = \"\"matchchat\"\"\n\nconn = pymysql.connect(\n\t\t\thost=mysql_host, \n\t\t\tuser=mysql_user, \n\t\t\tpasswd=mysql_pass, \n\t\t\tdb=mysql_db, \n\t\t\tcharset=\"\"utf8mb4\"\", \n\t\t\tcursorclass=pymysql.cursors.DictCursor, \n\t\t\tautocommit=True, \n\t\t\tport=tunnel.local_bind_port\n\t\t)\n\n\t\ttry:\n\t\t\twith conn.cursor() as cursor:\n\t\t\t\tcursor.execute(\"alter table members auto_increment=7\")\n\t\t\t\tcursor.execute(\"select * from table\") // cursor.fetchall()\n\t\t\t\tcursor.execute(\"select * from table where id = 1\") // cursor.fetchone()\n\t\t\t\tcursor.execute(\"select count(*) from table\") // cursor.fetchone()[\"\"count(*)\"\"]\n\t\tfinally:\n\t\t\tconn.close()","sudo mkdir appname\n\ncd appname\n\nsudo mkdir -p app/static app/templates\n\nsudo nano app/__init__.py\n\n#Code\nfrom flask import Flask\napp = Flask(__name__)\nfrom app import views\n#End Code\n\nsudo nano app/views.py\n\n#Code\nfrom app import app\n\n@app.route(\"\"/\"\")\ndef home():\n   return \"hello world!\"\n#End Code\n\nsudo nano uwsgi.ini\n\n#Code\n[uwsgi]\nmodule = main\ncallable = app\nmaster = true\n#End Code\n\nsudo nano main.py\n\n#Code\nfrom app import app\n#End Code\n\nsudo nano requirements.txt\n\n#Code\nFlask==1.1.1\n#End Code\n\nsudo nano Dockerfile\n\n#Code\nFROM tiangolo/uwsgi-nginx-flask:python3.6-alpine3.7\nRUN apk --update add bash nano\nENV STATIC_URL /static\nENV STATIC_PATH /home/kevin/appname/app/static\nCOPY ./requirements.txt /home/kevin/appname/requirements.txt\nRUN pip install -r /home/kevin/appname/requirements.txt\n#End Code\n\nsudo nc localhost 56733 < /dev/null; echo $?\n\nsudo nano start.sh\n\n#Code\n#!/bin/bash\napp=\"docker.test\"\ndocker build -t ${app} .\ndocker run -d -p 56733:80 \\\n  --name=${app} \\\n  -v $PWD:/app ${app}\n#End Code\n\nsudo bash start.sh\n\nsudo docker ps\n\nGo to http://ip-address:56733\n\nRefresh with \"\"sudo docker stop docker.test && sudo docker start docker.test\"\"\n\nsudo nano uwsgi.ini\n\n#Code\nmodule = main\ncallable = app\nmaster = true\ntouch-reload = /app/uwsgi.ini\n#End Code\n\nsudo touch uwsgi.ini","brew install mysql\n\non error \"\"pip install mysqlclient\"\"\n\nbrew install openssl","# allow auto-restart\nconfig.reload_classes_only_on_change = false\nconfig/environments/development.rb\n","# open folder within terminal\nln -s \"\"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"\" /usr/local/bin/subl\nsubl \"\"foldername\"\"","# create rails folder and database\nrails new \"\"foldername\"\" -d mysql\n\ncd \"\"foldername\"\"\n\nrake db:create\n\nrails webpacker:install // local only\n\nrails s -b ipaddress","# create model for table\nrails g model \"\"Tablename\"\" name:string{30} isbn:string cost:float\n\n# migrate information to tables\nrake db:migrate","# create controller\nrails g controller \"\"controllername\"\"s index new create show edit update destroy\n\n# setup routes in \"\"foldername\"\"/config/routes.rb\nRails.application.routes.draw do\n         get \"\"users/index\"\"\n         post \"\"users/get_users\"\"\n\n         resources :users, :more\n\n         root \"\"users/index\"\"\n         root \"\"users/get_users\"\"\nend\n\n# javascript fetch\nfetch(url + \"\"users/get_users\"\", {\n      method: \"\"POST\"\",\n      headers: { \"\"Content-Type\"\": \"\"application/json\"\" },\n      body: JSON.stringify({ username: username })\n})","# send user emails\nrails g mailer UserMailer\n\nclass UserMailer < ApplicationMailer\n\tdefault from: \"\"sender@email\"\"\n\n\tdef send(user)\n\t\t@user = user\n\n\t\thtml = \"</div>\"\n\n\t\tdelivery_option = { address: \"\"\"\", user_name: \"\"\"\", password: \"\"\"\", port: 0, tls: 0, ssl: 0 }\n\n\t\tmail(to: @user[\"\"email\"\"], body: html, content_type: \"text/html\", subject: \"\"send email\"\", delivery_method_options: delivery_option)\n\tend\nend","# start rails project with extra option\nrails new \"\"foldername\"\" --webpack=react\n\n# add gem to dependency file\ngem \"\"react-rails\"\"\n\n# run the generator\nrails g react:install\n\nrails g react:component filename prop:string\n","# get cli\nnpm install -g @angular/cli\n\n# create new project\nng new projectname\n\n# generate component\nng generate component xyz\n\n# add material\nng add @angular/material\n\n# add PWA support\nng add @angular/pwa\n\n# add dependency\nng add _____\n\n# run and watch tests\nng test\n\n# build for production\nng build --prod","this is the second info of topic with react native and third topic"]}